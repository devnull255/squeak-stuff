TestCase subclass: #BlankCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!BlankCellTestCase methodsFor: 'tests' stamp: 'mdm 1/26/2014 14:37'!testCellExitSides	"tests cell exitSides access"	| cell exit |	cell := BlankCell new.	exit := cell exitSideFor: #north.	self should: [exit = #south].	exit := cell exitSideFor: #east.	self should: [exit = #west].	exit := cell exitSideFor: #south.	self should: [exit = #north].	exit := cell exitSideFor: #west.	self should: [exit = #east].	! !!BlankCellTestCase methodsFor: 'tests' stamp: 'mdm 1/26/2014 14:51'!testCellLaserActivity	"check if the expected line segments are lit-up when a laser beam enters"	| cell |	cell := BlankCell new.	cell laserEntersFrom: #north.	self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #west].	! !!BlankCellTestCase methodsFor: 'tests' stamp: 'mdm 1/26/2014 13:25'!testCellOnState	"Check to see if cell isOn or isOff"	| cell |	cell := BlankCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].	! !!BlankCellTestCase methodsFor: 'tests' stamp: 'mdm 1/26/2014 14:05'!testCellSegmentsState	"check the state of the line segments in our cell"	| cell |	cell := BlankCell new.	self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #west].	self shouldnt: [cell isSegmentOnFor: #south].	! !TestCase subclass: #CellRendererTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: 'mdm 5/12/2014 10:43'!testCellOffsetCalculation	"test  offset calculations for rendering cells on the board"      | grid form cellLoc cell renderer offset |      grid := GridFactory demoGrid.      form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.      form fillColor: (Color r: 0.820 g: 0.820 b: 0.820).      cellLoc := 1@1.      cell := grid at: cellLoc.      renderer := CellRenderer rendererFor: cell grid: grid form: form.      offset := renderer offsetWithinGridForm.      self should: [ offset = (0@0) ].        cellLoc := 2@1.       cell := grid at: cellLoc.       renderer := CellRenderer rendererFor: cell grid: grid form: form.       offset := renderer offsetWithinGridForm.       self should: [offset = (30@0)].       cellLoc := 1@2.       cell := grid at: cellLoc.       renderer := CellRenderer rendererFor: cell grid: grid form: form.       offset := renderer offsetWithinGridForm.        self should: [offset = (0@30)].       cellLoc := 2@2.       cell := grid at: cellLoc.       renderer := CellRenderer rendererFor: cell grid: grid form: form.       offset := renderer offsetWithinGridForm.       self should: [offset = (30@30)].                      ! !!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 07:01'!testRendererSelection	"tests selection of cell renderer for each cell model"       | renderer cell |       cell := BlankCell new.       renderer := CellRenderer rendererFor: cell.       self should: [renderer = BlankCellRenderer].       cell := MirrorCell new.       renderer := CellRenderer rendererFor: cell.       self should: [ renderer = MirrorCellRenderer].              cell := TargetCell new.       renderer := CellRenderer rendererFor: cell.       self should: [renderer = TargetCellRenderer].! !TestCase subclass: #GridDirectionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!GridDirectionTestCase methodsFor: 'tests' stamp: 'mdm 2/27/2014 07:27'!testDirectionSelection	"test of GridDirection classes"	| direction |	direction := GridDirection directionFor: #north.	self should: [direction = GridDirectionNorth].	self should: [direction vector = (0@ -1)].	direction := GridDirection directionFor: #east.	self should: [direction = GridDirectionEast].	self should: [direction vector = (1@0)].	direction := GridDirection directionFor: #south.	self should: [direction = GridDirectionSouth].	self should: [direction vector = (0@1)].	direction := GridDirection directionFor: #west.	self should: [direction = GridDirectionWest].	self should: [direction vector = (-1@0)].		! !TestCase subclass: #GridTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!GridTestCase methodsFor: 'tests' stamp: 'mdm 3/2/2014 16:39'!testCellInteractions	"generate test grid and test"      | grid cell  expectedActiveLocationsList foundOn|      grid := self generateDemoGrid.      cell := grid at: 5@1.      self should: [cell isOff].      grid activateCellsInPath.      self should: [cell isOn].      expectedActiveLocationsList := {           1@5.           2@5.           3@5.           4@5.            4@4.           4@3.           4@2.            4@1.            5@1.           }.           foundOn := grid cells select: [:each | each isOn].           self should:  [foundOn size = expectedActiveLocationsList size].           foundOn do: [:fcell |	           self should: [expectedActiveLocationsList includes: fcell gridLocation]]          ! !!GridTestCase methodsFor: 'tests' stamp: 'mdm 2/13/2014 07:54'!testInitialConditions	"test the initial conditions of a grid"      | grid cell |      grid := Grid new.      self shouldnt: [grid laserIsActive].      cell := grid at: 1@1.      self should: [cell class = BlankCell].! !!GridTestCase methodsFor: 'tests' stamp: 'mdm 2/13/2014 07:55'!testNonDefaultGridSizeInitialConditions	"test the initial conditions of a grid"      | grid cell |      grid := Grid newOfSize: 4@4.      self shouldnt: [grid laserIsActive].      cell := grid at: 1@1.      self should: [cell class = BlankCell].      cell := grid at: 2@3.      self should: [cell class = BlankCell].      self should: [cell isOff].! !!GridTestCase methodsFor: 'private' stamp: 'mdm 3/6/2014 07:39'!generateDemoGrid	"generate a grid for our test"      ^GridFactory demoGrid! !TestCase subclass: #MirrorCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!MirrorCellTestCase methodsFor: 'tests' stamp: 'mdm 1/31/2014 07:19'!testCellExitSidesMirrorLeft	"CellExitSidesMirrorLeft test"      | cell exit |      cell := MirrorCell new.      cell leanLeft.      exit := cell exitSideFor: #north.      self should: [exit = #east].      exit := cell exitSideFor: #east.      self should: [exit = #north].      exit := cell exitSideFor: #south.      self should: [exit = #west].      exit := cell exitSideFor: #west.      self should: [exit = #south].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'mdm 1/31/2014 07:23'!testCellExitSidesMirrorRight	"test exitsides for right leaning mirror"      | cell exit |      cell := MirrorCell new.      cell leanRight.      exit := cell exitSideFor: #north.      self should: [exit = #west].      exit := cell exitSideFor: #east.      self should: [exit = #south].      exit := cell exitSideFor: #south.      self should: [exit = #east].      exit := cell exitSideFor: #west.      self should: [exit = #north].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'mdm 2/19/2014 21:28'!testCellLaserActivityMirrorLeft	"test laser activity for leaning left mirror cell"      | cell |      cell := MirrorCell leanLeft.      cell laserEntersFrom: #north.      self should: [cell isOn].      self should: [cell isSegmentOnFor: #north].      self should: [cell isSegmentOnFor: #east].      self shouldnt: [cell isSegmentOnFor: #south].      self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'mdm 2/19/2014 21:30'!testCellLaserActivityMirrorRight	"test state of right leaning mirror upon laser entering"      |cell|      cell := MirrorCell leanRight.      cell laserEntersFrom: #north.      self should: [cell isOn].      self  should: [cell isSegmentOnFor: #north].      self should: [cell isSegmentOnFor: #west].      self shouldnt: [cell isSegmentOnFor: #east].      self shouldnt: [cell isSegmentOnFor: #south].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'mdm 1/30/2014 07:41'!testCellOnState	"tests the MirrorCells on state"      | cell |      cell := MirrorCell new.      self should: [cell isOff].      self shouldnt: [cell isOn].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'mdm 1/30/2014 20:30'!testCellSegmentsState	"Test states of all the segments"      |cell |      cell := MirrorCell new.      self shouldnt: [cell isSegmentOnFor: #north].      self shouldnt: [cell isSegmentOnFor: #east].      self shouldnt: [cell isSegmentOnFor: #south].      self shouldnt: [cell isSegmentOnFor: #west].! !TestCase subclass: #TargetCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!TargetCellTestCase methodsFor: 'tests' stamp: 'mdm 2/5/2014 07:34'!testCellExitSides	"test exitsides of cell"	| cell inputSides |	cell := TargetCell new.	inputSides := #(#north #east #south #west).	inputSides do: [:inputSide |		|exit|		exit := cell exitSideFor: inputSide.		self should: [exit isNil]]	! !!TargetCellTestCase methodsFor: 'tests' stamp: 'mdm 2/5/2014 07:30'!testCellLaserActivity	"Come and look at my new laser, Austin Powers!!"	| cell |	cell := TargetCell new.	cell laserEntersFrom: #north.	self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #west].	! !!TargetCellTestCase methodsFor: 'tests' stamp: 'mdm 2/2/2014 23:00'!testCellOnState	"testCellOnState"      | cell |      cell := TargetCell new.      self should: [cell isOff].      self shouldnt: [cell isOn].! !!TargetCellTestCase methodsFor: 'tests' stamp: 'mdm 2/5/2014 07:25'!testCellSegmentState	"test the state of cell segments"	| cell |	cell := TargetCell new.	self shouldnt: [ cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].	! !