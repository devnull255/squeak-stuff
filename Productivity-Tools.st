Object subclass: #Datagenerator	instanceVariableNames: 'firstNames lastNames delimiter streetNames streetTypes cities states products hostnames domains'	classVariableNames: ''	poolDictionaries: ''	category: 'Productivity-Tools'!!Datagenerator commentStamp: 'mdm 5/13/2014 15:20' prior: 0!This class generates test data!!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!cities	^ cities! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!cities: anObject	cities := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:03'!city	"answers sender with a random city"      ^self cities atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!delimiter	^ delimiter! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!delimiter: anObject	delimiter := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:04'!domain	"answers sender with a random domain"      ^self domains atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!domains	^ domains! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!domains: anObject	domains := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:05'!firstName     "Answers sender with a random entry from firstNames"     ^self firstNames atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!firstNames	^ firstNames! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 19:24'!firstNames: anObject	firstNames := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:06'!hostname	"answers sender with a random entry from hostnames"      ^self hostnames atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!hostnames	^ hostnames! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!hostnames: anObject	hostnames := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:02'!lastName	"answers with a random entry from lastNames"      ^self lastNames atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!lastNames	^ lastNames! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!lastNames: anObject	lastNames := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:07'!product	"answers sender with a random entry from products"      ^self products atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!products	^ products! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!products: anObject	products := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:08'!state	"answers sender with an entry from states"      ^self states atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!states	^ states! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!states: anObject	states := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:10'!streetName	"answers sender with a random entry from streetNames"      ^self streetNames atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!streetNames	^ streetNames! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!streetNames: anObject	streetNames := anObject! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 17:11'!streetType	"answers sender with a random entry from streetTypes"      ^self streetTypes atRandom! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!streetTypes	^ streetTypes! !!Datagenerator methodsFor: 'accessing' stamp: 'mdm 5/13/2014 15:22'!streetTypes: anObject	streetTypes := anObject! !!Datagenerator methodsFor: 'initialize-release' stamp: 'mdm 5/14/2014 11:38'!initialize	"initializes a Datagenerator object"      super initialize.      self lastNames: #('Smith' 'Jones' 'Campbell' 'Edwards' ).      self firstNames: #('Michael' 'Paul' 'Amy' 'Cheryl' 'Randy' 'Bob' 'Steve' 'Carrie').      self delimiter: ':'.      self streetNames: #('Pine' 'Oak' 'Main' 'Maple' 'Grove' 'Third' 'Fourth' 'Fifth' ).      self streetTypes: #('St.' 'Dr.' 'Ave.' 'Rd.' 'Blvd').      self cities: #('Oakland' 'Three Oaks' 'Paradise' 'Hell' 'Heaven' 'Concepcion' '.General Junction' 'York' 'Seward' 'Mabinville' ).      self states: #('AL' 'AS' 'AZ' 'CA' 'CO' 'CN' 'DE' 'FL' 'GA' 'HA' 'ID' 'IL' 'IN' 'IA' 'KS' 'KY' 'LA' 'ME' 'MD' 'MA' 'MI' 'MN' 'MS' 'MO' 'MT' 'NE' 'NV' 'NH' 'NJ' 'NM' 'NY' 'NC' 'ND' 'OH' 'OK' 'OR' 'PA' 'RD' 'SC' 'SD' 'TN' 'TX' 'UT' 'VT' 'VA' 'WA' 'WV' 'WI' 'WY').      self products: #('oranges' 'apples' 'bananas' 'avocados' ).      self hostnames: #('anakin' 'eduardo' 'windu' 'skywalker' 'arrakis' ).      self domains: #('com' 'net' 'edu' 'gov' 'biz').! !!Datagenerator methodsFor: 'generated' stamp: 'mdm 5/13/2014 18:19'!alpha: aLength	"answers sender with a string of randomly generated alphabetic characters"      |alphaString|      alphaString := ''.      1 to: aLength do: [:x | alphaString := alphaString,  (Character alphabet atRandom) asString].      ^alphaString      ! !!Datagenerator methodsFor: 'generated' stamp: 'mdm 5/13/2014 19:34'!alphaNumeric: aLength	"answers sender with an alphanumeric string of aLength"	| tmpString |	tmpString := ''.      aLength timesRepeat: [        (1 to: 2) atRandom = 1              ifTrue: [tmpString := tmpString,(self numeric: 1).]             ifFalse: [tmpString := tmpString,(self alpha: 1)]].       ^tmpString ! !!Datagenerator methodsFor: 'generated' stamp: 'mdm 5/13/2014 18:59'!mixedAlpha: aLength	"answers sender with random alphabetic string in mixed case"	| mixedCaseString |	mixedCaseString := ''.      (self alpha: aLength) do: [:s |              ((1 to: 2) atRandom = 1)                   ifTrue: [ mixedCaseString := mixedCaseString, s asUppercase.]                   ifFalse: [ mixedCaseString := mixedCaseString, s.]        ].      ^mixedCaseString! !!Datagenerator methodsFor: 'generated' stamp: 'mdm 5/13/2014 19:20'!numeric: aLength	"generates the sender with a numeric string"	| tmpString |      tmpString := ''.	aLength timesRepeat: [          tmpString := tmpString,((0 to: 9) atRandom) asString].      ^tmpString! !!Datagenerator methodsFor: 'generated' stamp: 'mdm 5/13/2014 19:41'!phoneNumber	"answers with a phone number"	|  areaCode prefix suffix|	areaCode := self numeric: 3.      prefix := self numeric: 3.      suffix := self numeric: 4.      ^'{1}-{2}-{3}' format: {areaCode . prefix . suffix}! !!Datagenerator methodsFor: 'generated' stamp: 'mdm 5/14/2014 11:43'!ssn	"answers with a generated ssn-like string"      | prefix infix suffix|      prefix := self numeric: 3.      infix := self numeric: 2.      suffix := self numeric: 4.      ^'{1}-{2}-{3}' format: {prefix . infix . suffix}! !!Datagenerator methodsFor: 'generated' stamp: 'mdm 5/13/2014 18:36'!upperAlpha: aLength	"answers sender with an upper case alpha"      ^(self alpha: aLength) asUppercase ! !!Datagenerator methodsFor: 'examples' stamp: 'mdm 5/14/2014 14:24'!example1	"answers sender with an example of Datagenerator generation printed on a Transcript"	| record contactID firstName lastName address city state streetNum zipCode workspace contents|      workspace := StringHolder new.      contents := ''.	25 timesRepeat: [            contactID := self numeric: 10.            firstName := self firstName.            lastName := self lastName.            streetNum := (1 to: 6) atRandom asString.            address := '{1} {2} {3}' format: {streetNum . self streetName . self streetType }.            city := self city.            state := self state.            zipCode :=  self numeric: 5.            record := '{1},{2},{3},{4},{5},{6},{7}{8}' format: {contactID . firstName . lastName . address . city . state . zipCode . Character cr}.            contents := contents, record ].             workspace textContents: (contents) withSqueakLineEndings.             workspace openLabel: 'Datagenerator example1'.! !!Datagenerator methodsFor: 'examples' stamp: 'mdm 5/14/2014 18:15'!exampleWithTitle: aTitleString 	"answers sender with an example of Datagenerator generation printed on a Transcript"	| record contactID firstName lastName address city state streetNum zipCode workspace contents|      workspace := StringHolder new.      contents := ''.	25 timesRepeat: [            contactID := self numeric: 10.            firstName := self firstName.            lastName := self lastName.            streetNum := (1 to: 6) atRandom asString.            address := '{1} {2} {3}' format: {streetNum . self streetName . self streetType }.            city := self city.            state := self state.            zipCode :=  self numeric: 5.            record := '{1},{2},{3},{4},{5},{6},{7}{8}' format: {contactID . firstName . lastName . address . city . state . zipCode . Character cr}.            record := record copyReplaceAll: ',' with: self delimiter.             contents := contents, record ].             workspace textContents: (contents) withSqueakLineEndings.             workspace openLabel: aTitleString.! !