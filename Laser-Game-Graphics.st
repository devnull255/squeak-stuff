Object subclass: #CellRenderer	instanceVariableNames: 'cellLocation grid targetForm'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!CellRenderer methodsFor: 'accessing' stamp: 'mdm 3/6/2014 06:43'!cellLocation	^ cellLocation! !!CellRenderer methodsFor: 'accessing' stamp: 'mdm 3/6/2014 06:43'!cellLocation: anObject	cellLocation := anObject! !!CellRenderer methodsFor: 'accessing' stamp: 'mdm 3/6/2014 06:43'!grid	^ grid! !!CellRenderer methodsFor: 'accessing' stamp: 'mdm 3/6/2014 06:43'!grid: anObject	grid := anObject! !!CellRenderer methodsFor: 'accessing' stamp: 'mdm 3/6/2014 06:43'!targetForm	^ targetForm! !!CellRenderer methodsFor: 'accessing' stamp: 'mdm 3/6/2014 06:43'!targetForm: anObject	targetForm := anObject! !!CellRenderer methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 07:50'!offsetWithinGridForm	"returns offset within the form's grid"      | delta xCount yCount offset |      delta := CellRenderer cellExtent.      xCount := (self cellLocation x) - 1.      yCount := (self cellLocation y) - 1.      offset := delta * (xCount@yCount).      ^offset! !!CellRenderer methodsFor: 'drawing' stamp: 'mdm 3/7/2014 07:39'!render	"render cell on the form"	self renderBorder;	       renderContents! !!CellRenderer methodsFor: 'drawing' stamp: 'mdm 3/7/2014 08:06'!renderBorder	"render border of the cell"      self           renderBorderTop;           renderBorderRight;           renderBorderBottom;           renderBorderLeft! !!CellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 10:56'!renderBorderBottom	"renders bottom border of cell"	|line delta offset x1 x2 y1 y2 fillForm|	delta := CellRenderer cellExtent - 1.	offset _ self offsetWithinGridForm.	x1 := offset x.	x2 := x1 + delta x.	y1 := offset y + delta y.	y2 := y1.	fillForm := Form extent: 1@1 depth: 8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line	     from: x1@y1	     to: x2@y2	     withForm: fillForm.	line displayOn: self targetForm! !!CellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 10:57'!renderBorderLeft	"draws left border of the cell"	| line delta offset x1 x2 y1 y2 fillForm|	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	fillForm := Form extent: 1@1 depth: 8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line	     from: x1@y1	     to: x2@y2	     withForm: fillForm.	line displayOn: self targetForm! !!CellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 10:59'!renderBorderRight	"renders right border of the cell"	| line delta offset x1 x2 y1 y2 fillForm|	delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	x1 := offset x + delta x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	fillForm := Form extent: 1@1 depth: 8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line	     from: x1@y1	     to: x2@y2	     withForm: fillForm.	line displayOn: self targetForm	! !!CellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 11:00'!renderBorderTop	"draw the top of the cell border"	| line delta offset x1 x2 y1 y2 fillForm |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1 + delta x.	y1 := offset y.	y2 := y1.	fillForm := Form extent: 1@1 depth: 8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line	     from: x1@y1	     to: x2@y2	     withForm: fillForm.	line displayOn: self targetForm	! !!CellRenderer methodsFor: 'drawing' stamp: 'mdm 3/7/2014 07:40'!renderContents	"render the contents of the cell"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CellRenderer class	instanceVariableNames: ''!!CellRenderer class methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 07:15'!cellExtent	"returns dimensions of the cell for drawing"      ^30@30! !!CellRenderer class methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 06:52'!rendererFor: aCell	"returns the proper renderer for a cell model"      ^self subclasses detect: [:cls | cls modelClass = aCell class]! !!CellRenderer class methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 07:54'!rendererFor: aCell grid: aGrid form: aForm	"returns the proper renderer for a cell on a grid and on a form"      | cls model |      cls := self rendererFor: aCell.      model := cls new.      model            cellLocation: aCell gridLocation;            grid: aGrid;            targetForm: aForm.      ^model! !CellRenderer subclass: #BlankCellRenderer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BlankCellRenderer class	instanceVariableNames: ''!!BlankCellRenderer class methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 06:47'!modelClass	"returns the BlankCell model class"      ^BlankCell! !Morph subclass: #LaserGame	instanceVariableNames: 'grid boardForm'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!LaserGame methodsFor: 'accessing' stamp: 'mdm 5/12/2014 11:50'!boardForm	^ boardForm! !!LaserGame methodsFor: 'accessing' stamp: 'mdm 5/12/2014 11:50'!boardForm: anObject	boardForm := anObject! !!LaserGame methodsFor: 'accessing' stamp: 'mdm 3/6/2014 07:17'!grid	^ grid! !!LaserGame methodsFor: 'accessing' stamp: 'mdm 3/6/2014 07:17'!grid: anObject	grid := anObject! !!LaserGame methodsFor: 'initialization' stamp: 'mdm 5/12/2014 11:59'!calculatedExtent	"returns the extent calculated from panelWidth" 	| pt |	pt := self boardForm extent.      pt := pt + (self panelWidth@0).      ^pt! !!LaserGame methodsFor: 'initialization' stamp: 'mdm 5/12/2014 12:22'!initialize	"perform initialization of this instance"      super initialize.      self grid: GridFactory demoGrid.      self boardForm: (Form extent: (self class boardExtentFor: self grid) depth: Display depth).      self boardForm fillColor: LaserGameColors gameBoardBackgroundColor.      self setExtent.      self setupMorphs.      self drawGameBoard.! !!LaserGame methodsFor: 'initialization' stamp: 'mdm 5/17/2014 18:32'!makeControlPanelMorph	"creates the control panel morph for the LaserGame"	| panel  buttonHeight vertOffsetTop vertOffsetBtm |	panel := RectangleMorph new borderWidth: 0;                  color: Color white;                  layoutPolicy: ProportionalLayout new.      buttonHeight := 26.      vertOffsetTop := 10 + buttonHeight + 10 + buttonHeight.      vertOffsetBtm := 10 + buttonHeight + 10.      ^panel! !!LaserGame methodsFor: 'initialization' stamp: 'mdm 5/12/2014 12:14'!makeGameBoardMorph	"returns a morph for the gameboard"	| boardMorph |	boardMorph := SketchMorph withForm: self boardForm.      ^boardMorph! !!LaserGame methodsFor: 'initialization' stamp: 'mdm 5/12/2014 11:57'!panelWidth	"returns default width for this LaserGame panel"      ^100! !!LaserGame methodsFor: 'initialization' stamp: 'mdm 5/12/2014 12:00'!setExtent	"sets the extent of the LaserGame Morph"      self extent: self calculatedExtent! !!LaserGame methodsFor: 'initialization' stamp: 'mdm 5/12/2014 12:09'!setupMorphs	"setup morph policy and add composite Morphs"      self layoutPolicy: ProportionalLayout new.      self              addMorph: self makeGameBoardMorph             fullFrame: (LayoutFrame                      fractions: (0 @ 0 corner: 1 @ 1)                       offsets: (0 @ 0 corner: self panelWidth negated @ 0)).      self             addMorph: self makeControlPanelMorph             fullFrame: (LayoutFrame                        fractions: (1 @ 0 corner: 1 @ 1)                       offsets: ( self panelWidth negated @ 0 corner: 0 @ 0)).! !!LaserGame methodsFor: 'drawing' stamp: 'mdm 5/12/2014 12:21'!drawGameBoard	"answer by drawing the gameboard on the BoardMorph"      | cell renderer |      1 to: self grid numberOfColumns do: [:x |             1 to: self grid numberOfRows do: [: y |                     cell := self grid at: x@y.                      renderer := CellRenderer rendererFor: cell grid: self grid form: self boardForm.             renderer render]].! !!LaserGame methodsFor: 'as yet unclassified' stamp: 'mdm 5/17/2014 15:57'!fireLaser	"answers sender by firing the Laser"      self revisit: 'TODO'! !!LaserGame methodsFor: 'as yet unclassified' stamp: 'mdm 5/17/2014 15:54'!makeButton: label action: actionSymbol state: stateSymbol	"answers the sender with a button with an action and label"	| btn labelMorph |	btn := PluggableButtonMorph                       on: self                       getState: stateSymbol                       action: actionSymbol.      labelMorph := StringMorph contents: label.      labelMorph emphasis: 1.      btn           label: labelMorph;           useRoundedCorners;           hResizing: #spaceFill;           onColor: Color veryLightGray offColor: Color lightGray;           borderWidth: 2;           borderColor: #raised.      btn label color: Color darkGray.      ^btn        ! !!LaserGame methodsFor: 'as yet unclassified' stamp: 'mdm 5/17/2014 15:55'!makeQuitGameButton	"answers sender by returning a quit button"      self makeButton: 'Quit' action: #quitGame state: nil! !!LaserGame methodsFor: 'as yet unclassified' stamp: 'mdm 5/17/2014 15:56'!quitGame	"answers sender by quitting the game"     self revisit: 'TODO'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LaserGame class	instanceVariableNames: ''!!LaserGame class methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 07:19'!boardExtentFor: aGrid	"returns the dimensions for the entire board"      | x y |      x := CellRenderer cellExtent x * aGrid numberOfColumns.      y := CellRenderer cellExtent y * aGrid numberOfRows.      ^x@y! !Object subclass: #LaserGameColors	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LaserGameColors class	instanceVariableNames: ''!!LaserGameColors class methodsFor: 'as yet unclassified' stamp: 'mdm 3/8/2014 10:52'!cellBorderColor	"returns color of cell border"      ^Color darkGray! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: 'mdm 3/8/2014 10:51'!gameBoardBackgroundColor	"returns LaserGame board background color"      ^Color r: 0.860 g: 0.860 b: 0.860! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: 'mdm 3/8/2014 10:52'!mirrorColor	"returns color of Mirror"      ^Color blue! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: 'mdm 5/12/2014 11:32'!targetCenterColor	"defines the colors for the center of a target"     ^Color r: 0.0 g: 0.0 b: 0.92! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: 'mdm 5/12/2014 11:35'!targetCenterColorActive	"defines the center of a target in an active state"      ^Color r: 1.0 g: 1.0 b: 0.634! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: 'mdm 5/12/2014 11:33'!targetCenterColorIdle	"defines the color of the center of the target in an idle state"      ^Color r: 0.313 g: 0.753 b: 0.976! !CellRenderer subclass: #MirrorCellRenderer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!MirrorCellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 10:35'!cornerInset	"comment stating purpose of message"      ^8@8.! !!MirrorCellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 10:31'!renderContents	"renders the contents of a MirrorCell"      | cell |      cell := self grid at: self cellLocation.      cell isLeft          ifTrue: [self renderContentsLeanLeft]          ifFalse: [self renderContentsLeanRight] ! !!MirrorCellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 11:04'!renderContentsLeanLeft	"renders the contents of a left leaning MirrorCell"      | offset delta x1 x2 y1 y2 line fillForm |      offset := self offsetWithinGridForm.      delta := CellRenderer cellExtent - 1.      x1 := offset x + (self cornerInset x).      x2 := offset x + delta x - (self cornerInset x).      y1 := offset y + (self cornerInset y).      y2 := offset y + delta y - (self cornerInset y).      fillForm := Form extent: 2@2 depth: 8.      fillForm fillColor: LaserGameColors mirrorColor.      line := Line           from: x1@y1           to: x2@y2           withForm: fillForm.      line displayOn: self targetForm ! !!MirrorCellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 11:05'!renderContentsLeanRight	"rendeers the contents of a right leaning MirrorCell"       | offset delta x1 x2 y1 y2 line fillForm|       offset := self offsetWithinGridForm.       delta := CellRenderer cellExtent - 1.       x1 := offset x + delta x - self cornerInset x.       x2 := offset x + self cornerInset x.       y1 := offset y + (self cornerInset y).        y2 := offset y + delta y - (self cornerInset y).        fillForm := Form extent: 2@2 depth: 8.        fillForm fillColor: LaserGameColors mirrorColor.        line := Line             from: x1@y1             to: x2@y2             withForm: fillForm.        line displayOn: self targetForm! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MirrorCellRenderer class	instanceVariableNames: ''!!MirrorCellRenderer class methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 06:48'!modelClass	"returns class model for cell to render"      ^MirrorCell! !CellRenderer subclass: #TargetCellRenderer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!TargetCellRenderer methodsFor: 'drawing' stamp: 'mdm 5/12/2014 11:36'!drawCircleOutline	"Draw the outline of the circle"	| delta offset fillForm circle |	delta := CellRenderer cellExtent - 1.      offset := self offsetWithinGridForm.      circle := Circle new.      fillForm := Form extent: 2@2 depth: 8.      fillForm fillColor: LaserGameColors targetCenterColor.      circle form: fillForm.      circle radius: 7.      circle center: (offset + (delta // 2)).      circle displayOn: self targetForm.! !!TargetCellRenderer methodsFor: 'drawing' stamp: 'mdm 5/12/2014 11:15'!drawCrossHairsOutlines	"draws crosshair outlines of the target in target cell"	| inset delta offset x1 x2 y1 y2 fillForm line |	inset := 6@6.      delta := CellRenderer cellExtent - 1.      offset := self offsetWithinGridForm.      x1 := offset x + inset x.      x2 := offset x + delta x - inset x.      y1 := offset y + (delta y // 2).      y2 := y1.      fillForm := Form extent: 2@2 depth: 8.      fillForm fillColor: LaserGameColors targetCenterColor.      line := Line           from: x1@y1           to: x2@y2           withForm: fillForm.      line displayOn: self targetForm.! !!TargetCellRenderer methodsFor: 'drawing' stamp: 'mdm 5/12/2014 11:05'!drawTargetOutlines	"draws outlines of a target in TargetCell"      self drawCrossHairsOutlines.      self drawCircleOutline! !!TargetCellRenderer methodsFor: 'drawing' stamp: 'mdm 3/8/2014 11:10'!renderContents	"renders the contents of a Target Cell"	| cell |      cell := self grid at: self cellLocation.      self drawTargetOutlines.      cell isOn             ifTrue: [self renderContentsOn]             ifFalse: [self renderContentsOff]! !!TargetCellRenderer methodsFor: 'drawing' stamp: 'mdm 5/12/2014 11:22'!renderContentsOff	"renders contents of a Target cell that is off"      self renderInnerCircleColor: LaserGameColors targetCenterColorIdle.! !!TargetCellRenderer methodsFor: 'drawing' stamp: 'mdm 5/12/2014 11:23'!renderContentsOn	"renders the contents of a Target Cell that is on"      self renderInnerCircleColor: LaserGameColors targetCenterColorActive.! !!TargetCellRenderer methodsFor: 'drawing' stamp: 'mdm 5/12/2014 11:28'!renderInnerCircleColor: aColor	"colors an inner circle"	| circle fillForm offset delta |	delta := CellRenderer cellExtent - 1.      offset := self offsetWithinGridForm.      circle := Circle new.      fillForm := Form extent: 4@4 depth: 8.      fillForm fillColor: aColor.      circle form: fillForm.      circle radius: 3.      circle center: (offset + (delta // 2) - 1).      circle displayOn: self targetForm.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TargetCellRenderer class	instanceVariableNames: ''!!TargetCellRenderer class methodsFor: 'as yet unclassified' stamp: 'mdm 3/6/2014 06:50'!modelClass	"returns class for correct cell model for this renderer"      ^TargetCell! !